
002SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001634  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080017d4  080017d4  000027d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001910  08001910  000030a8  2**0
                  CONTENTS
  4 .ARM          00000008  08001910  08001910  00002910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001918  08001918  000030a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001918  08001918  00002918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800191c  0800191c  0000291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08001920  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000a8  080019c8  000030a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080019c8  00003218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019da  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c8  00000000  00000000  00004ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00005280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e4  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cad  00000000  00000000  00005714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f27  00000000  00000000  000083c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085763  00000000  00000000  0000b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090a4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001328  00000000  00000000  00090a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00091db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080017bc 	.word	0x080017bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	080017bc 	.word	0x080017bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData = 90;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e015      	b.n	80002bc <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000290:	f000 fa66 	bl	8000760 <rand>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	4419      	add	r1, r3
 800029e:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <array_fill_numbers+0x50>)
 80002a0:	fb83 0302 	smull	r0, r3, r3, r2
 80002a4:	1198      	asrs	r0, r3, #6
 80002a6:	17d3      	asrs	r3, r2, #31
 80002a8:	1ac3      	subs	r3, r0, r3
 80002aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ae:	fb00 f303 	mul.w	r3, r0, r3
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	3301      	adds	r3, #1
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d3e5      	bcc.n	8000290 <array_fill_numbers+0x10>
    }

}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	10624dd3 	.word	0x10624dd3

080002d4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	480e      	ldr	r0, [pc, #56]	@ (800031c <display_numbers+0x48>)
 80002e4:	f000 fb3c 	bl	8000960 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	e00b      	b.n	8000306 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4413      	add	r3, r2
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4809      	ldr	r0, [pc, #36]	@ (8000320 <display_numbers+0x4c>)
 80002fc:	f000 fb30 	bl	8000960 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	697a      	ldr	r2, [r7, #20]
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	429a      	cmp	r2, r3
 800030c:	d3ef      	bcc.n	80002ee <display_numbers+0x1a>
    }

    printf("\n");
 800030e:	200a      	movs	r0, #10
 8000310:	f000 fb38 	bl	8000984 <putchar>
}
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	080017d4 	.word	0x080017d4
 8000320:	080017d8 	.word	0x080017d8

08000324 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
     int temp=*x;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]
     *y=temp;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	601a      	str	r2, [r3, #0]
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif

     someData = 10;
 8000342:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <swap_numbers+0x30>)
 8000344:	220a      	movs	r2, #10
 8000346:	601a      	str	r2, [r3, #0]
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	20000044 	.word	0x20000044

08000358 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e02f      	b.n	80003cc <bubble_sort+0x74>
    {
        flag=0;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
 8000374:	e01d      	b.n	80003b2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	3301      	adds	r3, #1
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	440b      	add	r3, r1
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	429a      	cmp	r2, r3
 800038e:	dd0d      	ble.n	80003ac <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	18d0      	adds	r0, r2, r3
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	3301      	adds	r3, #1
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	4619      	mov	r1, r3
 80003a4:	f7ff ffbe 	bl	8000324 <swap_numbers>
                flag=1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	3301      	adds	r3, #1
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d8da      	bhi.n	8000376 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d008      	beq.n	80003d8 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	3301      	adds	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	1e5a      	subs	r2, r3, #1
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d8ca      	bhi.n	800036c <bubble_sort+0x14>
            break;
    }
}
 80003d6:	e000      	b.n	80003da <bubble_sort+0x82>
            break;
 80003d8:	bf00      	nop
}
 80003da:	bf00      	nop
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b087      	sub	sp, #28
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	e02c      	b.n	800044c <insertion_sort+0x6a>
     {
         j=i-1;
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 8000404:	e00d      	b.n	8000422 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	441a      	add	r2, r3
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	3301      	adds	r3, #1
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	440b      	add	r3, r1
 8000418:	6812      	ldr	r2, [r2, #0]
 800041a:	601a      	str	r2, [r3, #0]
             j--;
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	3b01      	subs	r3, #1
 8000420:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b00      	cmp	r3, #0
 8000426:	db07      	blt.n	8000438 <insertion_sort+0x56>
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbe6      	blt.n	8000406 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	3301      	adds	r3, #1
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	429a      	cmp	r2, r3
 8000452:	d8ce      	bhi.n	80003f2 <insertion_sort+0x10>
     }


}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	371c      	adds	r7, #28
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
	...

08000464 <main>:



int main()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 800046a:	2311      	movs	r3, #17
 800046c:	607b      	str	r3, [r7, #4]

    array_fill_numbers(numbers,len);
 800046e:	6879      	ldr	r1, [r7, #4]
 8000470:	4813      	ldr	r0, [pc, #76]	@ (80004c0 <main+0x5c>)
 8000472:	f7ff ff05 	bl	8000280 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000476:	4a13      	ldr	r2, [pc, #76]	@ (80004c4 <main+0x60>)
 8000478:	6879      	ldr	r1, [r7, #4]
 800047a:	4811      	ldr	r0, [pc, #68]	@ (80004c0 <main+0x5c>)
 800047c:	f7ff ff2a 	bl	80002d4 <display_numbers>

    bubble_sort(numbers,len);
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <main+0x5c>)
 8000484:	f7ff ff68 	bl	8000358 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 8000488:	4a0f      	ldr	r2, [pc, #60]	@ (80004c8 <main+0x64>)
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <main+0x5c>)
 800048e:	f7ff ff21 	bl	80002d4 <display_numbers>

    array_fill_numbers(numbers,len);
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	480a      	ldr	r0, [pc, #40]	@ (80004c0 <main+0x5c>)
 8000496:	f7ff fef3 	bl	8000280 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 800049a:	4a0c      	ldr	r2, [pc, #48]	@ (80004cc <main+0x68>)
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	4808      	ldr	r0, [pc, #32]	@ (80004c0 <main+0x5c>)
 80004a0:	f7ff ff18 	bl	80002d4 <display_numbers>

    insertion_sort(numbers,len);
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	4806      	ldr	r0, [pc, #24]	@ (80004c0 <main+0x5c>)
 80004a8:	f7ff ff9b 	bl	80003e2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 80004ac:	4a08      	ldr	r2, [pc, #32]	@ (80004d0 <main+0x6c>)
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	4803      	ldr	r0, [pc, #12]	@ (80004c0 <main+0x5c>)
 80004b2:	f7ff ff0f 	bl	80002d4 <display_numbers>



    return 0;
 80004b6:	2300      	movs	r3, #0
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000000 	.word	0x20000000
 80004c4:	080017e0 	.word	0x080017e0
 80004c8:	080017f4 	.word	0x080017f4
 80004cc:	08001808 	.word	0x08001808
 80004d0:	0800181c 	.word	0x0800181c

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <NMI_Handler+0x4>

080004dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <MemManage_Handler+0x4>

080004ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052a:	f000 f905 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}

08000532 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  return 1;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_kill>:

int _kill(int pid, int sig)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800054c:	f000 fab4 	bl	8000ab8 <__errno>
 8000550:	4603      	mov	r3, r0
 8000552:	2216      	movs	r2, #22
 8000554:	601a      	str	r2, [r3, #0]
  return -1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055a:	4618      	mov	r0, r3
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_exit>:

void _exit (int status)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800056a:	f04f 31ff 	mov.w	r1, #4294967295
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffe7 	bl	8000542 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <_exit+0x12>

08000578 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e00a      	b.n	80005a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800058a:	f3af 8000 	nop.w
 800058e:	4601      	mov	r1, r0
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	60ba      	str	r2, [r7, #8]
 8000596:	b2ca      	uxtb	r2, r1
 8000598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf0      	blt.n	800058a <_read+0x12>
  }

  return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b086      	sub	sp, #24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e009      	b.n	80005d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf1      	blt.n	80005c4 <_write+0x12>
  }
  return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_close>:

int _close(int file)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000612:	605a      	str	r2, [r3, #4]
  return 0;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800065c:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <_sbrk+0x5c>)
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <_sbrk+0x60>)
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <_sbrk+0x64>)
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <_sbrk+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	429a      	cmp	r2, r3
 8000682:	d207      	bcs.n	8000694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000684:	f000 fa18 	bl	8000ab8 <__errno>
 8000688:	4603      	mov	r3, r0
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	e009      	b.n	80006a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069a:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	4a05      	ldr	r2, [pc, #20]	@ (80006b8 <_sbrk+0x64>)
 80006a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20018000 	.word	0x20018000
 80006b4:	00000400 	.word	0x00000400
 80006b8:	200000c4 	.word	0x200000c4
 80006bc:	20000218 	.word	0x20000218

080006c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	@ (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800071c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006e8:	f7ff ffea 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	@ (8000730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000712:	f000 f9d7 	bl	8000ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000716:	f7ff fea5 	bl	8000464 <main>
  bx  lr    
 800071a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800071c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000728:	08001920 	.word	0x08001920
  ldr r2, =_sbss
 800072c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000730:	20000218 	.word	0x20000218

08000734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC_IRQHandler>
	...

08000738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_IncTick+0x20>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_IncTick+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_IncTick+0x24>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000048 	.word	0x20000048
 800075c:	200000c8 	.word	0x200000c8

08000760 <rand>:
 8000760:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <rand+0x5c>)
 8000762:	b510      	push	{r4, lr}
 8000764:	681c      	ldr	r4, [r3, #0]
 8000766:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000768:	b9b3      	cbnz	r3, 8000798 <rand+0x38>
 800076a:	2018      	movs	r0, #24
 800076c:	f000 fa3a 	bl	8000be4 <malloc>
 8000770:	4602      	mov	r2, r0
 8000772:	6320      	str	r0, [r4, #48]	@ 0x30
 8000774:	b920      	cbnz	r0, 8000780 <rand+0x20>
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <rand+0x60>)
 8000778:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <rand+0x64>)
 800077a:	2152      	movs	r1, #82	@ 0x52
 800077c:	f000 f9ca 	bl	8000b14 <__assert_func>
 8000780:	4911      	ldr	r1, [pc, #68]	@ (80007c8 <rand+0x68>)
 8000782:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <rand+0x6c>)
 8000784:	e9c0 1300 	strd	r1, r3, [r0]
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <rand+0x70>)
 800078a:	6083      	str	r3, [r0, #8]
 800078c:	230b      	movs	r3, #11
 800078e:	8183      	strh	r3, [r0, #12]
 8000790:	2100      	movs	r1, #0
 8000792:	2001      	movs	r0, #1
 8000794:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000798:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <rand+0x74>)
 800079c:	690b      	ldr	r3, [r1, #16]
 800079e:	694c      	ldr	r4, [r1, #20]
 80007a0:	4a0d      	ldr	r2, [pc, #52]	@ (80007d8 <rand+0x78>)
 80007a2:	4358      	muls	r0, r3
 80007a4:	fb02 0004 	mla	r0, r2, r4, r0
 80007a8:	fba3 3202 	umull	r3, r2, r3, r2
 80007ac:	3301      	adds	r3, #1
 80007ae:	eb40 0002 	adc.w	r0, r0, r2
 80007b2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80007b6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80007ba:	bd10      	pop	{r4, pc}
 80007bc:	20000058 	.word	0x20000058
 80007c0:	0800182f 	.word	0x0800182f
 80007c4:	08001846 	.word	0x08001846
 80007c8:	abcd330e 	.word	0xabcd330e
 80007cc:	e66d1234 	.word	0xe66d1234
 80007d0:	0005deec 	.word	0x0005deec
 80007d4:	5851f42d 	.word	0x5851f42d
 80007d8:	4c957f2d 	.word	0x4c957f2d

080007dc <std>:
 80007dc:	2300      	movs	r3, #0
 80007de:	b510      	push	{r4, lr}
 80007e0:	4604      	mov	r4, r0
 80007e2:	e9c0 3300 	strd	r3, r3, [r0]
 80007e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ea:	6083      	str	r3, [r0, #8]
 80007ec:	8181      	strh	r1, [r0, #12]
 80007ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80007f0:	81c2      	strh	r2, [r0, #14]
 80007f2:	6183      	str	r3, [r0, #24]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2208      	movs	r2, #8
 80007f8:	305c      	adds	r0, #92	@ 0x5c
 80007fa:	f000 f90e 	bl	8000a1a <memset>
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <std+0x58>)
 8000800:	6263      	str	r3, [r4, #36]	@ 0x24
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <std+0x5c>)
 8000804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <std+0x60>)
 8000808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <std+0x64>)
 800080c:	6323      	str	r3, [r4, #48]	@ 0x30
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <std+0x68>)
 8000810:	6224      	str	r4, [r4, #32]
 8000812:	429c      	cmp	r4, r3
 8000814:	d006      	beq.n	8000824 <std+0x48>
 8000816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800081a:	4294      	cmp	r4, r2
 800081c:	d002      	beq.n	8000824 <std+0x48>
 800081e:	33d0      	adds	r3, #208	@ 0xd0
 8000820:	429c      	cmp	r4, r3
 8000822:	d105      	bne.n	8000830 <std+0x54>
 8000824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082c:	f000 b96e 	b.w	8000b0c <__retarget_lock_init_recursive>
 8000830:	bd10      	pop	{r4, pc}
 8000832:	bf00      	nop
 8000834:	08000995 	.word	0x08000995
 8000838:	080009b7 	.word	0x080009b7
 800083c:	080009ef 	.word	0x080009ef
 8000840:	08000a13 	.word	0x08000a13
 8000844:	200000cc 	.word	0x200000cc

08000848 <stdio_exit_handler>:
 8000848:	4a02      	ldr	r2, [pc, #8]	@ (8000854 <stdio_exit_handler+0xc>)
 800084a:	4903      	ldr	r1, [pc, #12]	@ (8000858 <stdio_exit_handler+0x10>)
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <stdio_exit_handler+0x14>)
 800084e:	f000 b869 	b.w	8000924 <_fwalk_sglue>
 8000852:	bf00      	nop
 8000854:	2000004c 	.word	0x2000004c
 8000858:	080013f9 	.word	0x080013f9
 800085c:	2000005c 	.word	0x2000005c

08000860 <cleanup_stdio>:
 8000860:	6841      	ldr	r1, [r0, #4]
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <cleanup_stdio+0x34>)
 8000864:	4299      	cmp	r1, r3
 8000866:	b510      	push	{r4, lr}
 8000868:	4604      	mov	r4, r0
 800086a:	d001      	beq.n	8000870 <cleanup_stdio+0x10>
 800086c:	f000 fdc4 	bl	80013f8 <_fflush_r>
 8000870:	68a1      	ldr	r1, [r4, #8]
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <cleanup_stdio+0x38>)
 8000874:	4299      	cmp	r1, r3
 8000876:	d002      	beq.n	800087e <cleanup_stdio+0x1e>
 8000878:	4620      	mov	r0, r4
 800087a:	f000 fdbd 	bl	80013f8 <_fflush_r>
 800087e:	68e1      	ldr	r1, [r4, #12]
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <cleanup_stdio+0x3c>)
 8000882:	4299      	cmp	r1, r3
 8000884:	d004      	beq.n	8000890 <cleanup_stdio+0x30>
 8000886:	4620      	mov	r0, r4
 8000888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800088c:	f000 bdb4 	b.w	80013f8 <_fflush_r>
 8000890:	bd10      	pop	{r4, pc}
 8000892:	bf00      	nop
 8000894:	200000cc 	.word	0x200000cc
 8000898:	20000134 	.word	0x20000134
 800089c:	2000019c 	.word	0x2000019c

080008a0 <global_stdio_init.part.0>:
 80008a0:	b510      	push	{r4, lr}
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <global_stdio_init.part.0+0x30>)
 80008a4:	4c0b      	ldr	r4, [pc, #44]	@ (80008d4 <global_stdio_init.part.0+0x34>)
 80008a6:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <global_stdio_init.part.0+0x38>)
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	4620      	mov	r0, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	f7ff ff94 	bl	80007dc <std>
 80008b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80008b8:	2201      	movs	r2, #1
 80008ba:	2109      	movs	r1, #9
 80008bc:	f7ff ff8e 	bl	80007dc <std>
 80008c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80008c4:	2202      	movs	r2, #2
 80008c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ca:	2112      	movs	r1, #18
 80008cc:	f7ff bf86 	b.w	80007dc <std>
 80008d0:	20000204 	.word	0x20000204
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	08000849 	.word	0x08000849

080008dc <__sfp_lock_acquire>:
 80008dc:	4801      	ldr	r0, [pc, #4]	@ (80008e4 <__sfp_lock_acquire+0x8>)
 80008de:	f000 b916 	b.w	8000b0e <__retarget_lock_acquire_recursive>
 80008e2:	bf00      	nop
 80008e4:	2000020d 	.word	0x2000020d

080008e8 <__sfp_lock_release>:
 80008e8:	4801      	ldr	r0, [pc, #4]	@ (80008f0 <__sfp_lock_release+0x8>)
 80008ea:	f000 b911 	b.w	8000b10 <__retarget_lock_release_recursive>
 80008ee:	bf00      	nop
 80008f0:	2000020d 	.word	0x2000020d

080008f4 <__sinit>:
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	f7ff fff0 	bl	80008dc <__sfp_lock_acquire>
 80008fc:	6a23      	ldr	r3, [r4, #32]
 80008fe:	b11b      	cbz	r3, 8000908 <__sinit+0x14>
 8000900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000904:	f7ff bff0 	b.w	80008e8 <__sfp_lock_release>
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <__sinit+0x28>)
 800090a:	6223      	str	r3, [r4, #32]
 800090c:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <__sinit+0x2c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f5      	bne.n	8000900 <__sinit+0xc>
 8000914:	f7ff ffc4 	bl	80008a0 <global_stdio_init.part.0>
 8000918:	e7f2      	b.n	8000900 <__sinit+0xc>
 800091a:	bf00      	nop
 800091c:	08000861 	.word	0x08000861
 8000920:	20000204 	.word	0x20000204

08000924 <_fwalk_sglue>:
 8000924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000928:	4607      	mov	r7, r0
 800092a:	4688      	mov	r8, r1
 800092c:	4614      	mov	r4, r2
 800092e:	2600      	movs	r6, #0
 8000930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000934:	f1b9 0901 	subs.w	r9, r9, #1
 8000938:	d505      	bpl.n	8000946 <_fwalk_sglue+0x22>
 800093a:	6824      	ldr	r4, [r4, #0]
 800093c:	2c00      	cmp	r4, #0
 800093e:	d1f7      	bne.n	8000930 <_fwalk_sglue+0xc>
 8000940:	4630      	mov	r0, r6
 8000942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000946:	89ab      	ldrh	r3, [r5, #12]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d907      	bls.n	800095c <_fwalk_sglue+0x38>
 800094c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000950:	3301      	adds	r3, #1
 8000952:	d003      	beq.n	800095c <_fwalk_sglue+0x38>
 8000954:	4629      	mov	r1, r5
 8000956:	4638      	mov	r0, r7
 8000958:	47c0      	blx	r8
 800095a:	4306      	orrs	r6, r0
 800095c:	3568      	adds	r5, #104	@ 0x68
 800095e:	e7e9      	b.n	8000934 <_fwalk_sglue+0x10>

08000960 <iprintf>:
 8000960:	b40f      	push	{r0, r1, r2, r3}
 8000962:	b507      	push	{r0, r1, r2, lr}
 8000964:	4906      	ldr	r1, [pc, #24]	@ (8000980 <iprintf+0x20>)
 8000966:	ab04      	add	r3, sp, #16
 8000968:	6808      	ldr	r0, [r1, #0]
 800096a:	f853 2b04 	ldr.w	r2, [r3], #4
 800096e:	6881      	ldr	r1, [r0, #8]
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	f000 fa17 	bl	8000da4 <_vfiprintf_r>
 8000976:	b003      	add	sp, #12
 8000978:	f85d eb04 	ldr.w	lr, [sp], #4
 800097c:	b004      	add	sp, #16
 800097e:	4770      	bx	lr
 8000980:	20000058 	.word	0x20000058

08000984 <putchar>:
 8000984:	4b02      	ldr	r3, [pc, #8]	@ (8000990 <putchar+0xc>)
 8000986:	4601      	mov	r1, r0
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	6882      	ldr	r2, [r0, #8]
 800098c:	f000 bd6e 	b.w	800146c <_putc_r>
 8000990:	20000058 	.word	0x20000058

08000994 <__sread>:
 8000994:	b510      	push	{r4, lr}
 8000996:	460c      	mov	r4, r1
 8000998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800099c:	f000 f868 	bl	8000a70 <_read_r>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	bfab      	itete	ge
 80009a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009a6:	89a3      	ldrhlt	r3, [r4, #12]
 80009a8:	181b      	addge	r3, r3, r0
 80009aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80009ae:	bfac      	ite	ge
 80009b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009b2:	81a3      	strhlt	r3, [r4, #12]
 80009b4:	bd10      	pop	{r4, pc}

080009b6 <__swrite>:
 80009b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ba:	461f      	mov	r7, r3
 80009bc:	898b      	ldrh	r3, [r1, #12]
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	4605      	mov	r5, r0
 80009c2:	460c      	mov	r4, r1
 80009c4:	4616      	mov	r6, r2
 80009c6:	d505      	bpl.n	80009d4 <__swrite+0x1e>
 80009c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009cc:	2302      	movs	r3, #2
 80009ce:	2200      	movs	r2, #0
 80009d0:	f000 f83c 	bl	8000a4c <_lseek_r>
 80009d4:	89a3      	ldrh	r3, [r4, #12]
 80009d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009de:	81a3      	strh	r3, [r4, #12]
 80009e0:	4632      	mov	r2, r6
 80009e2:	463b      	mov	r3, r7
 80009e4:	4628      	mov	r0, r5
 80009e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009ea:	f000 b853 	b.w	8000a94 <_write_r>

080009ee <__sseek>:
 80009ee:	b510      	push	{r4, lr}
 80009f0:	460c      	mov	r4, r1
 80009f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f6:	f000 f829 	bl	8000a4c <_lseek_r>
 80009fa:	1c43      	adds	r3, r0, #1
 80009fc:	89a3      	ldrh	r3, [r4, #12]
 80009fe:	bf15      	itete	ne
 8000a00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a0a:	81a3      	strheq	r3, [r4, #12]
 8000a0c:	bf18      	it	ne
 8000a0e:	81a3      	strhne	r3, [r4, #12]
 8000a10:	bd10      	pop	{r4, pc}

08000a12 <__sclose>:
 8000a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a16:	f000 b809 	b.w	8000a2c <_close_r>

08000a1a <memset>:
 8000a1a:	4402      	add	r2, r0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d100      	bne.n	8000a24 <memset+0xa>
 8000a22:	4770      	bx	lr
 8000a24:	f803 1b01 	strb.w	r1, [r3], #1
 8000a28:	e7f9      	b.n	8000a1e <memset+0x4>
	...

08000a2c <_close_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4d06      	ldr	r5, [pc, #24]	@ (8000a48 <_close_r+0x1c>)
 8000a30:	2300      	movs	r3, #0
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	602b      	str	r3, [r5, #0]
 8000a38:	f7ff fdd7 	bl	80005ea <_close>
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	d102      	bne.n	8000a46 <_close_r+0x1a>
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	b103      	cbz	r3, 8000a46 <_close_r+0x1a>
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	20000208 	.word	0x20000208

08000a4c <_lseek_r>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	4d07      	ldr	r5, [pc, #28]	@ (8000a6c <_lseek_r+0x20>)
 8000a50:	4604      	mov	r4, r0
 8000a52:	4608      	mov	r0, r1
 8000a54:	4611      	mov	r1, r2
 8000a56:	2200      	movs	r2, #0
 8000a58:	602a      	str	r2, [r5, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f7ff fdec 	bl	8000638 <_lseek>
 8000a60:	1c43      	adds	r3, r0, #1
 8000a62:	d102      	bne.n	8000a6a <_lseek_r+0x1e>
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	b103      	cbz	r3, 8000a6a <_lseek_r+0x1e>
 8000a68:	6023      	str	r3, [r4, #0]
 8000a6a:	bd38      	pop	{r3, r4, r5, pc}
 8000a6c:	20000208 	.word	0x20000208

08000a70 <_read_r>:
 8000a70:	b538      	push	{r3, r4, r5, lr}
 8000a72:	4d07      	ldr	r5, [pc, #28]	@ (8000a90 <_read_r+0x20>)
 8000a74:	4604      	mov	r4, r0
 8000a76:	4608      	mov	r0, r1
 8000a78:	4611      	mov	r1, r2
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	602a      	str	r2, [r5, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f7ff fd7a 	bl	8000578 <_read>
 8000a84:	1c43      	adds	r3, r0, #1
 8000a86:	d102      	bne.n	8000a8e <_read_r+0x1e>
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	b103      	cbz	r3, 8000a8e <_read_r+0x1e>
 8000a8c:	6023      	str	r3, [r4, #0]
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
 8000a90:	20000208 	.word	0x20000208

08000a94 <_write_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4d07      	ldr	r5, [pc, #28]	@ (8000ab4 <_write_r+0x20>)
 8000a98:	4604      	mov	r4, r0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	602a      	str	r2, [r5, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f7ff fd85 	bl	80005b2 <_write>
 8000aa8:	1c43      	adds	r3, r0, #1
 8000aaa:	d102      	bne.n	8000ab2 <_write_r+0x1e>
 8000aac:	682b      	ldr	r3, [r5, #0]
 8000aae:	b103      	cbz	r3, 8000ab2 <_write_r+0x1e>
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	bd38      	pop	{r3, r4, r5, pc}
 8000ab4:	20000208 	.word	0x20000208

08000ab8 <__errno>:
 8000ab8:	4b01      	ldr	r3, [pc, #4]	@ (8000ac0 <__errno+0x8>)
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000058 	.word	0x20000058

08000ac4 <__libc_init_array>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8000afc <__libc_init_array+0x38>)
 8000ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8000b00 <__libc_init_array+0x3c>)
 8000aca:	1b64      	subs	r4, r4, r5
 8000acc:	10a4      	asrs	r4, r4, #2
 8000ace:	2600      	movs	r6, #0
 8000ad0:	42a6      	cmp	r6, r4
 8000ad2:	d109      	bne.n	8000ae8 <__libc_init_array+0x24>
 8000ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8000b04 <__libc_init_array+0x40>)
 8000ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8000b08 <__libc_init_array+0x44>)
 8000ad8:	f000 fe70 	bl	80017bc <_init>
 8000adc:	1b64      	subs	r4, r4, r5
 8000ade:	10a4      	asrs	r4, r4, #2
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	42a6      	cmp	r6, r4
 8000ae4:	d105      	bne.n	8000af2 <__libc_init_array+0x2e>
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aec:	4798      	blx	r3
 8000aee:	3601      	adds	r6, #1
 8000af0:	e7ee      	b.n	8000ad0 <__libc_init_array+0xc>
 8000af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af6:	4798      	blx	r3
 8000af8:	3601      	adds	r6, #1
 8000afa:	e7f2      	b.n	8000ae2 <__libc_init_array+0x1e>
 8000afc:	08001918 	.word	0x08001918
 8000b00:	08001918 	.word	0x08001918
 8000b04:	08001918 	.word	0x08001918
 8000b08:	0800191c 	.word	0x0800191c

08000b0c <__retarget_lock_init_recursive>:
 8000b0c:	4770      	bx	lr

08000b0e <__retarget_lock_acquire_recursive>:
 8000b0e:	4770      	bx	lr

08000b10 <__retarget_lock_release_recursive>:
 8000b10:	4770      	bx	lr
	...

08000b14 <__assert_func>:
 8000b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b16:	4614      	mov	r4, r2
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <__assert_func+0x2c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4605      	mov	r5, r0
 8000b20:	68d8      	ldr	r0, [r3, #12]
 8000b22:	b954      	cbnz	r4, 8000b3a <__assert_func+0x26>
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <__assert_func+0x30>)
 8000b26:	461c      	mov	r4, r3
 8000b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000b2c:	9100      	str	r1, [sp, #0]
 8000b2e:	462b      	mov	r3, r5
 8000b30:	4905      	ldr	r1, [pc, #20]	@ (8000b48 <__assert_func+0x34>)
 8000b32:	f000 fc89 	bl	8001448 <fiprintf>
 8000b36:	f000 fd71 	bl	800161c <abort>
 8000b3a:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__assert_func+0x38>)
 8000b3c:	e7f4      	b.n	8000b28 <__assert_func+0x14>
 8000b3e:	bf00      	nop
 8000b40:	20000058 	.word	0x20000058
 8000b44:	080018d9 	.word	0x080018d9
 8000b48:	080018ab 	.word	0x080018ab
 8000b4c:	0800189e 	.word	0x0800189e

08000b50 <_free_r>:
 8000b50:	b538      	push	{r3, r4, r5, lr}
 8000b52:	4605      	mov	r5, r0
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d041      	beq.n	8000bdc <_free_r+0x8c>
 8000b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b5c:	1f0c      	subs	r4, r1, #4
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bfb8      	it	lt
 8000b62:	18e4      	addlt	r4, r4, r3
 8000b64:	f000 f8e8 	bl	8000d38 <__malloc_lock>
 8000b68:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <_free_r+0x90>)
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	b933      	cbnz	r3, 8000b7c <_free_r+0x2c>
 8000b6e:	6063      	str	r3, [r4, #4]
 8000b70:	6014      	str	r4, [r2, #0]
 8000b72:	4628      	mov	r0, r5
 8000b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b78:	f000 b8e4 	b.w	8000d44 <__malloc_unlock>
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <_free_r+0x42>
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	1821      	adds	r1, r4, r0
 8000b84:	428b      	cmp	r3, r1
 8000b86:	bf01      	itttt	eq
 8000b88:	6819      	ldreq	r1, [r3, #0]
 8000b8a:	685b      	ldreq	r3, [r3, #4]
 8000b8c:	1809      	addeq	r1, r1, r0
 8000b8e:	6021      	streq	r1, [r4, #0]
 8000b90:	e7ed      	b.n	8000b6e <_free_r+0x1e>
 8000b92:	461a      	mov	r2, r3
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	b10b      	cbz	r3, 8000b9c <_free_r+0x4c>
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	d9fa      	bls.n	8000b92 <_free_r+0x42>
 8000b9c:	6811      	ldr	r1, [r2, #0]
 8000b9e:	1850      	adds	r0, r2, r1
 8000ba0:	42a0      	cmp	r0, r4
 8000ba2:	d10b      	bne.n	8000bbc <_free_r+0x6c>
 8000ba4:	6820      	ldr	r0, [r4, #0]
 8000ba6:	4401      	add	r1, r0
 8000ba8:	1850      	adds	r0, r2, r1
 8000baa:	4283      	cmp	r3, r0
 8000bac:	6011      	str	r1, [r2, #0]
 8000bae:	d1e0      	bne.n	8000b72 <_free_r+0x22>
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	6053      	str	r3, [r2, #4]
 8000bb6:	4408      	add	r0, r1
 8000bb8:	6010      	str	r0, [r2, #0]
 8000bba:	e7da      	b.n	8000b72 <_free_r+0x22>
 8000bbc:	d902      	bls.n	8000bc4 <_free_r+0x74>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	602b      	str	r3, [r5, #0]
 8000bc2:	e7d6      	b.n	8000b72 <_free_r+0x22>
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	1821      	adds	r1, r4, r0
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	bf04      	itt	eq
 8000bcc:	6819      	ldreq	r1, [r3, #0]
 8000bce:	685b      	ldreq	r3, [r3, #4]
 8000bd0:	6063      	str	r3, [r4, #4]
 8000bd2:	bf04      	itt	eq
 8000bd4:	1809      	addeq	r1, r1, r0
 8000bd6:	6021      	streq	r1, [r4, #0]
 8000bd8:	6054      	str	r4, [r2, #4]
 8000bda:	e7ca      	b.n	8000b72 <_free_r+0x22>
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}
 8000bde:	bf00      	nop
 8000be0:	20000214 	.word	0x20000214

08000be4 <malloc>:
 8000be4:	4b02      	ldr	r3, [pc, #8]	@ (8000bf0 <malloc+0xc>)
 8000be6:	4601      	mov	r1, r0
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	f000 b825 	b.w	8000c38 <_malloc_r>
 8000bee:	bf00      	nop
 8000bf0:	20000058 	.word	0x20000058

08000bf4 <sbrk_aligned>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8000c34 <sbrk_aligned+0x40>)
 8000bf8:	460c      	mov	r4, r1
 8000bfa:	6831      	ldr	r1, [r6, #0]
 8000bfc:	4605      	mov	r5, r0
 8000bfe:	b911      	cbnz	r1, 8000c06 <sbrk_aligned+0x12>
 8000c00:	f000 fcfc 	bl	80015fc <_sbrk_r>
 8000c04:	6030      	str	r0, [r6, #0]
 8000c06:	4621      	mov	r1, r4
 8000c08:	4628      	mov	r0, r5
 8000c0a:	f000 fcf7 	bl	80015fc <_sbrk_r>
 8000c0e:	1c43      	adds	r3, r0, #1
 8000c10:	d103      	bne.n	8000c1a <sbrk_aligned+0x26>
 8000c12:	f04f 34ff 	mov.w	r4, #4294967295
 8000c16:	4620      	mov	r0, r4
 8000c18:	bd70      	pop	{r4, r5, r6, pc}
 8000c1a:	1cc4      	adds	r4, r0, #3
 8000c1c:	f024 0403 	bic.w	r4, r4, #3
 8000c20:	42a0      	cmp	r0, r4
 8000c22:	d0f8      	beq.n	8000c16 <sbrk_aligned+0x22>
 8000c24:	1a21      	subs	r1, r4, r0
 8000c26:	4628      	mov	r0, r5
 8000c28:	f000 fce8 	bl	80015fc <_sbrk_r>
 8000c2c:	3001      	adds	r0, #1
 8000c2e:	d1f2      	bne.n	8000c16 <sbrk_aligned+0x22>
 8000c30:	e7ef      	b.n	8000c12 <sbrk_aligned+0x1e>
 8000c32:	bf00      	nop
 8000c34:	20000210 	.word	0x20000210

08000c38 <_malloc_r>:
 8000c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c3c:	1ccd      	adds	r5, r1, #3
 8000c3e:	f025 0503 	bic.w	r5, r5, #3
 8000c42:	3508      	adds	r5, #8
 8000c44:	2d0c      	cmp	r5, #12
 8000c46:	bf38      	it	cc
 8000c48:	250c      	movcc	r5, #12
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	db01      	blt.n	8000c54 <_malloc_r+0x1c>
 8000c50:	42a9      	cmp	r1, r5
 8000c52:	d904      	bls.n	8000c5e <_malloc_r+0x26>
 8000c54:	230c      	movs	r3, #12
 8000c56:	6033      	str	r3, [r6, #0]
 8000c58:	2000      	movs	r0, #0
 8000c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d34 <_malloc_r+0xfc>
 8000c62:	f000 f869 	bl	8000d38 <__malloc_lock>
 8000c66:	f8d8 3000 	ldr.w	r3, [r8]
 8000c6a:	461c      	mov	r4, r3
 8000c6c:	bb44      	cbnz	r4, 8000cc0 <_malloc_r+0x88>
 8000c6e:	4629      	mov	r1, r5
 8000c70:	4630      	mov	r0, r6
 8000c72:	f7ff ffbf 	bl	8000bf4 <sbrk_aligned>
 8000c76:	1c43      	adds	r3, r0, #1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	d158      	bne.n	8000d2e <_malloc_r+0xf6>
 8000c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8000c80:	4627      	mov	r7, r4
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d143      	bne.n	8000d0e <_malloc_r+0xd6>
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d04b      	beq.n	8000d22 <_malloc_r+0xea>
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	4630      	mov	r0, r6
 8000c90:	eb04 0903 	add.w	r9, r4, r3
 8000c94:	f000 fcb2 	bl	80015fc <_sbrk_r>
 8000c98:	4581      	cmp	r9, r0
 8000c9a:	d142      	bne.n	8000d22 <_malloc_r+0xea>
 8000c9c:	6821      	ldr	r1, [r4, #0]
 8000c9e:	1a6d      	subs	r5, r5, r1
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f7ff ffa6 	bl	8000bf4 <sbrk_aligned>
 8000ca8:	3001      	adds	r0, #1
 8000caa:	d03a      	beq.n	8000d22 <_malloc_r+0xea>
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	442b      	add	r3, r5
 8000cb0:	6023      	str	r3, [r4, #0]
 8000cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	bb62      	cbnz	r2, 8000d14 <_malloc_r+0xdc>
 8000cba:	f8c8 7000 	str.w	r7, [r8]
 8000cbe:	e00f      	b.n	8000ce0 <_malloc_r+0xa8>
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	1b52      	subs	r2, r2, r5
 8000cc4:	d420      	bmi.n	8000d08 <_malloc_r+0xd0>
 8000cc6:	2a0b      	cmp	r2, #11
 8000cc8:	d917      	bls.n	8000cfa <_malloc_r+0xc2>
 8000cca:	1961      	adds	r1, r4, r5
 8000ccc:	42a3      	cmp	r3, r4
 8000cce:	6025      	str	r5, [r4, #0]
 8000cd0:	bf18      	it	ne
 8000cd2:	6059      	strne	r1, [r3, #4]
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	bf08      	it	eq
 8000cd8:	f8c8 1000 	streq.w	r1, [r8]
 8000cdc:	5162      	str	r2, [r4, r5]
 8000cde:	604b      	str	r3, [r1, #4]
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f000 f82f 	bl	8000d44 <__malloc_unlock>
 8000ce6:	f104 000b 	add.w	r0, r4, #11
 8000cea:	1d23      	adds	r3, r4, #4
 8000cec:	f020 0007 	bic.w	r0, r0, #7
 8000cf0:	1ac2      	subs	r2, r0, r3
 8000cf2:	bf1c      	itt	ne
 8000cf4:	1a1b      	subne	r3, r3, r0
 8000cf6:	50a3      	strne	r3, [r4, r2]
 8000cf8:	e7af      	b.n	8000c5a <_malloc_r+0x22>
 8000cfa:	6862      	ldr	r2, [r4, #4]
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	bf0c      	ite	eq
 8000d00:	f8c8 2000 	streq.w	r2, [r8]
 8000d04:	605a      	strne	r2, [r3, #4]
 8000d06:	e7eb      	b.n	8000ce0 <_malloc_r+0xa8>
 8000d08:	4623      	mov	r3, r4
 8000d0a:	6864      	ldr	r4, [r4, #4]
 8000d0c:	e7ae      	b.n	8000c6c <_malloc_r+0x34>
 8000d0e:	463c      	mov	r4, r7
 8000d10:	687f      	ldr	r7, [r7, #4]
 8000d12:	e7b6      	b.n	8000c82 <_malloc_r+0x4a>
 8000d14:	461a      	mov	r2, r3
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	42a3      	cmp	r3, r4
 8000d1a:	d1fb      	bne.n	8000d14 <_malloc_r+0xdc>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6053      	str	r3, [r2, #4]
 8000d20:	e7de      	b.n	8000ce0 <_malloc_r+0xa8>
 8000d22:	230c      	movs	r3, #12
 8000d24:	6033      	str	r3, [r6, #0]
 8000d26:	4630      	mov	r0, r6
 8000d28:	f000 f80c 	bl	8000d44 <__malloc_unlock>
 8000d2c:	e794      	b.n	8000c58 <_malloc_r+0x20>
 8000d2e:	6005      	str	r5, [r0, #0]
 8000d30:	e7d6      	b.n	8000ce0 <_malloc_r+0xa8>
 8000d32:	bf00      	nop
 8000d34:	20000214 	.word	0x20000214

08000d38 <__malloc_lock>:
 8000d38:	4801      	ldr	r0, [pc, #4]	@ (8000d40 <__malloc_lock+0x8>)
 8000d3a:	f7ff bee8 	b.w	8000b0e <__retarget_lock_acquire_recursive>
 8000d3e:	bf00      	nop
 8000d40:	2000020c 	.word	0x2000020c

08000d44 <__malloc_unlock>:
 8000d44:	4801      	ldr	r0, [pc, #4]	@ (8000d4c <__malloc_unlock+0x8>)
 8000d46:	f7ff bee3 	b.w	8000b10 <__retarget_lock_release_recursive>
 8000d4a:	bf00      	nop
 8000d4c:	2000020c 	.word	0x2000020c

08000d50 <__sfputc_r>:
 8000d50:	6893      	ldr	r3, [r2, #8]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	b410      	push	{r4}
 8000d58:	6093      	str	r3, [r2, #8]
 8000d5a:	da08      	bge.n	8000d6e <__sfputc_r+0x1e>
 8000d5c:	6994      	ldr	r4, [r2, #24]
 8000d5e:	42a3      	cmp	r3, r4
 8000d60:	db01      	blt.n	8000d66 <__sfputc_r+0x16>
 8000d62:	290a      	cmp	r1, #10
 8000d64:	d103      	bne.n	8000d6e <__sfputc_r+0x1e>
 8000d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d6a:	f000 bbb3 	b.w	80014d4 <__swbuf_r>
 8000d6e:	6813      	ldr	r3, [r2, #0]
 8000d70:	1c58      	adds	r0, r3, #1
 8000d72:	6010      	str	r0, [r2, #0]
 8000d74:	7019      	strb	r1, [r3, #0]
 8000d76:	4608      	mov	r0, r1
 8000d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <__sfputs_r>:
 8000d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d80:	4606      	mov	r6, r0
 8000d82:	460f      	mov	r7, r1
 8000d84:	4614      	mov	r4, r2
 8000d86:	18d5      	adds	r5, r2, r3
 8000d88:	42ac      	cmp	r4, r5
 8000d8a:	d101      	bne.n	8000d90 <__sfputs_r+0x12>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e007      	b.n	8000da0 <__sfputs_r+0x22>
 8000d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d94:	463a      	mov	r2, r7
 8000d96:	4630      	mov	r0, r6
 8000d98:	f7ff ffda 	bl	8000d50 <__sfputc_r>
 8000d9c:	1c43      	adds	r3, r0, #1
 8000d9e:	d1f3      	bne.n	8000d88 <__sfputs_r+0xa>
 8000da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000da4 <_vfiprintf_r>:
 8000da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da8:	460d      	mov	r5, r1
 8000daa:	b09d      	sub	sp, #116	@ 0x74
 8000dac:	4614      	mov	r4, r2
 8000dae:	4698      	mov	r8, r3
 8000db0:	4606      	mov	r6, r0
 8000db2:	b118      	cbz	r0, 8000dbc <_vfiprintf_r+0x18>
 8000db4:	6a03      	ldr	r3, [r0, #32]
 8000db6:	b90b      	cbnz	r3, 8000dbc <_vfiprintf_r+0x18>
 8000db8:	f7ff fd9c 	bl	80008f4 <__sinit>
 8000dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dbe:	07d9      	lsls	r1, r3, #31
 8000dc0:	d405      	bmi.n	8000dce <_vfiprintf_r+0x2a>
 8000dc2:	89ab      	ldrh	r3, [r5, #12]
 8000dc4:	059a      	lsls	r2, r3, #22
 8000dc6:	d402      	bmi.n	8000dce <_vfiprintf_r+0x2a>
 8000dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dca:	f7ff fea0 	bl	8000b0e <__retarget_lock_acquire_recursive>
 8000dce:	89ab      	ldrh	r3, [r5, #12]
 8000dd0:	071b      	lsls	r3, r3, #28
 8000dd2:	d501      	bpl.n	8000dd8 <_vfiprintf_r+0x34>
 8000dd4:	692b      	ldr	r3, [r5, #16]
 8000dd6:	b99b      	cbnz	r3, 8000e00 <_vfiprintf_r+0x5c>
 8000dd8:	4629      	mov	r1, r5
 8000dda:	4630      	mov	r0, r6
 8000ddc:	f000 fbb8 	bl	8001550 <__swsetup_r>
 8000de0:	b170      	cbz	r0, 8000e00 <_vfiprintf_r+0x5c>
 8000de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000de4:	07dc      	lsls	r4, r3, #31
 8000de6:	d504      	bpl.n	8000df2 <_vfiprintf_r+0x4e>
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	b01d      	add	sp, #116	@ 0x74
 8000dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df2:	89ab      	ldrh	r3, [r5, #12]
 8000df4:	0598      	lsls	r0, r3, #22
 8000df6:	d4f7      	bmi.n	8000de8 <_vfiprintf_r+0x44>
 8000df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dfa:	f7ff fe89 	bl	8000b10 <__retarget_lock_release_recursive>
 8000dfe:	e7f3      	b.n	8000de8 <_vfiprintf_r+0x44>
 8000e00:	2300      	movs	r3, #0
 8000e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e04:	2320      	movs	r3, #32
 8000e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e0e:	2330      	movs	r3, #48	@ 0x30
 8000e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000fc0 <_vfiprintf_r+0x21c>
 8000e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e18:	f04f 0901 	mov.w	r9, #1
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	469a      	mov	sl, r3
 8000e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e24:	b10a      	cbz	r2, 8000e2a <_vfiprintf_r+0x86>
 8000e26:	2a25      	cmp	r2, #37	@ 0x25
 8000e28:	d1f9      	bne.n	8000e1e <_vfiprintf_r+0x7a>
 8000e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8000e2e:	d00b      	beq.n	8000e48 <_vfiprintf_r+0xa4>
 8000e30:	465b      	mov	r3, fp
 8000e32:	4622      	mov	r2, r4
 8000e34:	4629      	mov	r1, r5
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffa1 	bl	8000d7e <__sfputs_r>
 8000e3c:	3001      	adds	r0, #1
 8000e3e:	f000 80a7 	beq.w	8000f90 <_vfiprintf_r+0x1ec>
 8000e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e44:	445a      	add	r2, fp
 8000e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e48:	f89a 3000 	ldrb.w	r3, [sl]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 809f 	beq.w	8000f90 <_vfiprintf_r+0x1ec>
 8000e52:	2300      	movs	r3, #0
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e5c:	f10a 0a01 	add.w	sl, sl, #1
 8000e60:	9304      	str	r3, [sp, #16]
 8000e62:	9307      	str	r3, [sp, #28]
 8000e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e6a:	4654      	mov	r4, sl
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e72:	4853      	ldr	r0, [pc, #332]	@ (8000fc0 <_vfiprintf_r+0x21c>)
 8000e74:	f7ff f9b4 	bl	80001e0 <memchr>
 8000e78:	9a04      	ldr	r2, [sp, #16]
 8000e7a:	b9d8      	cbnz	r0, 8000eb4 <_vfiprintf_r+0x110>
 8000e7c:	06d1      	lsls	r1, r2, #27
 8000e7e:	bf44      	itt	mi
 8000e80:	2320      	movmi	r3, #32
 8000e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e86:	0713      	lsls	r3, r2, #28
 8000e88:	bf44      	itt	mi
 8000e8a:	232b      	movmi	r3, #43	@ 0x2b
 8000e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e90:	f89a 3000 	ldrb.w	r3, [sl]
 8000e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e96:	d015      	beq.n	8000ec4 <_vfiprintf_r+0x120>
 8000e98:	9a07      	ldr	r2, [sp, #28]
 8000e9a:	4654      	mov	r4, sl
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f04f 0c0a 	mov.w	ip, #10
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ea8:	3b30      	subs	r3, #48	@ 0x30
 8000eaa:	2b09      	cmp	r3, #9
 8000eac:	d94b      	bls.n	8000f46 <_vfiprintf_r+0x1a2>
 8000eae:	b1b0      	cbz	r0, 8000ede <_vfiprintf_r+0x13a>
 8000eb0:	9207      	str	r2, [sp, #28]
 8000eb2:	e014      	b.n	8000ede <_vfiprintf_r+0x13a>
 8000eb4:	eba0 0308 	sub.w	r3, r0, r8
 8000eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	9304      	str	r3, [sp, #16]
 8000ec0:	46a2      	mov	sl, r4
 8000ec2:	e7d2      	b.n	8000e6a <_vfiprintf_r+0xc6>
 8000ec4:	9b03      	ldr	r3, [sp, #12]
 8000ec6:	1d19      	adds	r1, r3, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	9103      	str	r1, [sp, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bfbb      	ittet	lt
 8000ed0:	425b      	neglt	r3, r3
 8000ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8000ed6:	9307      	strge	r3, [sp, #28]
 8000ed8:	9307      	strlt	r3, [sp, #28]
 8000eda:	bfb8      	it	lt
 8000edc:	9204      	strlt	r2, [sp, #16]
 8000ede:	7823      	ldrb	r3, [r4, #0]
 8000ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ee2:	d10a      	bne.n	8000efa <_vfiprintf_r+0x156>
 8000ee4:	7863      	ldrb	r3, [r4, #1]
 8000ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ee8:	d132      	bne.n	8000f50 <_vfiprintf_r+0x1ac>
 8000eea:	9b03      	ldr	r3, [sp, #12]
 8000eec:	1d1a      	adds	r2, r3, #4
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	9203      	str	r2, [sp, #12]
 8000ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000ef6:	3402      	adds	r4, #2
 8000ef8:	9305      	str	r3, [sp, #20]
 8000efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000fd0 <_vfiprintf_r+0x22c>
 8000efe:	7821      	ldrb	r1, [r4, #0]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4650      	mov	r0, sl
 8000f04:	f7ff f96c 	bl	80001e0 <memchr>
 8000f08:	b138      	cbz	r0, 8000f1a <_vfiprintf_r+0x176>
 8000f0a:	9b04      	ldr	r3, [sp, #16]
 8000f0c:	eba0 000a 	sub.w	r0, r0, sl
 8000f10:	2240      	movs	r2, #64	@ 0x40
 8000f12:	4082      	lsls	r2, r0
 8000f14:	4313      	orrs	r3, r2
 8000f16:	3401      	adds	r4, #1
 8000f18:	9304      	str	r3, [sp, #16]
 8000f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f1e:	4829      	ldr	r0, [pc, #164]	@ (8000fc4 <_vfiprintf_r+0x220>)
 8000f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f24:	2206      	movs	r2, #6
 8000f26:	f7ff f95b 	bl	80001e0 <memchr>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d03f      	beq.n	8000fae <_vfiprintf_r+0x20a>
 8000f2e:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <_vfiprintf_r+0x224>)
 8000f30:	bb1b      	cbnz	r3, 8000f7a <_vfiprintf_r+0x1d6>
 8000f32:	9b03      	ldr	r3, [sp, #12]
 8000f34:	3307      	adds	r3, #7
 8000f36:	f023 0307 	bic.w	r3, r3, #7
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	9303      	str	r3, [sp, #12]
 8000f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f40:	443b      	add	r3, r7
 8000f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f44:	e76a      	b.n	8000e1c <_vfiprintf_r+0x78>
 8000f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f4a:	460c      	mov	r4, r1
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e7a8      	b.n	8000ea2 <_vfiprintf_r+0xfe>
 8000f50:	2300      	movs	r3, #0
 8000f52:	3401      	adds	r4, #1
 8000f54:	9305      	str	r3, [sp, #20]
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 0c0a 	mov.w	ip, #10
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f62:	3a30      	subs	r2, #48	@ 0x30
 8000f64:	2a09      	cmp	r2, #9
 8000f66:	d903      	bls.n	8000f70 <_vfiprintf_r+0x1cc>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0c6      	beq.n	8000efa <_vfiprintf_r+0x156>
 8000f6c:	9105      	str	r1, [sp, #20]
 8000f6e:	e7c4      	b.n	8000efa <_vfiprintf_r+0x156>
 8000f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f74:	4604      	mov	r4, r0
 8000f76:	2301      	movs	r3, #1
 8000f78:	e7f0      	b.n	8000f5c <_vfiprintf_r+0x1b8>
 8000f7a:	ab03      	add	r3, sp, #12
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	462a      	mov	r2, r5
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <_vfiprintf_r+0x228>)
 8000f82:	a904      	add	r1, sp, #16
 8000f84:	4630      	mov	r0, r6
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4607      	mov	r7, r0
 8000f8c:	1c78      	adds	r0, r7, #1
 8000f8e:	d1d6      	bne.n	8000f3e <_vfiprintf_r+0x19a>
 8000f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f92:	07d9      	lsls	r1, r3, #31
 8000f94:	d405      	bmi.n	8000fa2 <_vfiprintf_r+0x1fe>
 8000f96:	89ab      	ldrh	r3, [r5, #12]
 8000f98:	059a      	lsls	r2, r3, #22
 8000f9a:	d402      	bmi.n	8000fa2 <_vfiprintf_r+0x1fe>
 8000f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f9e:	f7ff fdb7 	bl	8000b10 <__retarget_lock_release_recursive>
 8000fa2:	89ab      	ldrh	r3, [r5, #12]
 8000fa4:	065b      	lsls	r3, r3, #25
 8000fa6:	f53f af1f 	bmi.w	8000de8 <_vfiprintf_r+0x44>
 8000faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000fac:	e71e      	b.n	8000dec <_vfiprintf_r+0x48>
 8000fae:	ab03      	add	r3, sp, #12
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	462a      	mov	r2, r5
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <_vfiprintf_r+0x228>)
 8000fb6:	a904      	add	r1, sp, #16
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f000 f879 	bl	80010b0 <_printf_i>
 8000fbe:	e7e4      	b.n	8000f8a <_vfiprintf_r+0x1e6>
 8000fc0:	080018da 	.word	0x080018da
 8000fc4:	080018e4 	.word	0x080018e4
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	08000d7f 	.word	0x08000d7f
 8000fd0:	080018e0 	.word	0x080018e0

08000fd4 <_printf_common>:
 8000fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd8:	4616      	mov	r6, r2
 8000fda:	4698      	mov	r8, r3
 8000fdc:	688a      	ldr	r2, [r1, #8]
 8000fde:	690b      	ldr	r3, [r1, #16]
 8000fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	bfb8      	it	lt
 8000fe8:	4613      	movlt	r3, r2
 8000fea:	6033      	str	r3, [r6, #0]
 8000fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ff0:	4607      	mov	r7, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	b10a      	cbz	r2, 8000ffa <_printf_common+0x26>
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	6033      	str	r3, [r6, #0]
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	0699      	lsls	r1, r3, #26
 8000ffe:	bf42      	ittt	mi
 8001000:	6833      	ldrmi	r3, [r6, #0]
 8001002:	3302      	addmi	r3, #2
 8001004:	6033      	strmi	r3, [r6, #0]
 8001006:	6825      	ldr	r5, [r4, #0]
 8001008:	f015 0506 	ands.w	r5, r5, #6
 800100c:	d106      	bne.n	800101c <_printf_common+0x48>
 800100e:	f104 0a19 	add.w	sl, r4, #25
 8001012:	68e3      	ldr	r3, [r4, #12]
 8001014:	6832      	ldr	r2, [r6, #0]
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	42ab      	cmp	r3, r5
 800101a:	dc26      	bgt.n	800106a <_printf_common+0x96>
 800101c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001020:	6822      	ldr	r2, [r4, #0]
 8001022:	3b00      	subs	r3, #0
 8001024:	bf18      	it	ne
 8001026:	2301      	movne	r3, #1
 8001028:	0692      	lsls	r2, r2, #26
 800102a:	d42b      	bmi.n	8001084 <_printf_common+0xb0>
 800102c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001030:	4641      	mov	r1, r8
 8001032:	4638      	mov	r0, r7
 8001034:	47c8      	blx	r9
 8001036:	3001      	adds	r0, #1
 8001038:	d01e      	beq.n	8001078 <_printf_common+0xa4>
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	6922      	ldr	r2, [r4, #16]
 800103e:	f003 0306 	and.w	r3, r3, #6
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf02      	ittt	eq
 8001046:	68e5      	ldreq	r5, [r4, #12]
 8001048:	6833      	ldreq	r3, [r6, #0]
 800104a:	1aed      	subeq	r5, r5, r3
 800104c:	68a3      	ldr	r3, [r4, #8]
 800104e:	bf0c      	ite	eq
 8001050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001054:	2500      	movne	r5, #0
 8001056:	4293      	cmp	r3, r2
 8001058:	bfc4      	itt	gt
 800105a:	1a9b      	subgt	r3, r3, r2
 800105c:	18ed      	addgt	r5, r5, r3
 800105e:	2600      	movs	r6, #0
 8001060:	341a      	adds	r4, #26
 8001062:	42b5      	cmp	r5, r6
 8001064:	d11a      	bne.n	800109c <_printf_common+0xc8>
 8001066:	2000      	movs	r0, #0
 8001068:	e008      	b.n	800107c <_printf_common+0xa8>
 800106a:	2301      	movs	r3, #1
 800106c:	4652      	mov	r2, sl
 800106e:	4641      	mov	r1, r8
 8001070:	4638      	mov	r0, r7
 8001072:	47c8      	blx	r9
 8001074:	3001      	adds	r0, #1
 8001076:	d103      	bne.n	8001080 <_printf_common+0xac>
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001080:	3501      	adds	r5, #1
 8001082:	e7c6      	b.n	8001012 <_printf_common+0x3e>
 8001084:	18e1      	adds	r1, r4, r3
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	2030      	movs	r0, #48	@ 0x30
 800108a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800108e:	4422      	add	r2, r4
 8001090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001098:	3302      	adds	r3, #2
 800109a:	e7c7      	b.n	800102c <_printf_common+0x58>
 800109c:	2301      	movs	r3, #1
 800109e:	4622      	mov	r2, r4
 80010a0:	4641      	mov	r1, r8
 80010a2:	4638      	mov	r0, r7
 80010a4:	47c8      	blx	r9
 80010a6:	3001      	adds	r0, #1
 80010a8:	d0e6      	beq.n	8001078 <_printf_common+0xa4>
 80010aa:	3601      	adds	r6, #1
 80010ac:	e7d9      	b.n	8001062 <_printf_common+0x8e>
	...

080010b0 <_printf_i>:
 80010b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010b4:	7e0f      	ldrb	r7, [r1, #24]
 80010b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80010b8:	2f78      	cmp	r7, #120	@ 0x78
 80010ba:	4691      	mov	r9, r2
 80010bc:	4680      	mov	r8, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	469a      	mov	sl, r3
 80010c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80010c6:	d807      	bhi.n	80010d8 <_printf_i+0x28>
 80010c8:	2f62      	cmp	r7, #98	@ 0x62
 80010ca:	d80a      	bhi.n	80010e2 <_printf_i+0x32>
 80010cc:	2f00      	cmp	r7, #0
 80010ce:	f000 80d2 	beq.w	8001276 <_printf_i+0x1c6>
 80010d2:	2f58      	cmp	r7, #88	@ 0x58
 80010d4:	f000 80b9 	beq.w	800124a <_printf_i+0x19a>
 80010d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80010e0:	e03a      	b.n	8001158 <_printf_i+0xa8>
 80010e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80010e6:	2b15      	cmp	r3, #21
 80010e8:	d8f6      	bhi.n	80010d8 <_printf_i+0x28>
 80010ea:	a101      	add	r1, pc, #4	@ (adr r1, 80010f0 <_printf_i+0x40>)
 80010ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010f0:	08001149 	.word	0x08001149
 80010f4:	0800115d 	.word	0x0800115d
 80010f8:	080010d9 	.word	0x080010d9
 80010fc:	080010d9 	.word	0x080010d9
 8001100:	080010d9 	.word	0x080010d9
 8001104:	080010d9 	.word	0x080010d9
 8001108:	0800115d 	.word	0x0800115d
 800110c:	080010d9 	.word	0x080010d9
 8001110:	080010d9 	.word	0x080010d9
 8001114:	080010d9 	.word	0x080010d9
 8001118:	080010d9 	.word	0x080010d9
 800111c:	0800125d 	.word	0x0800125d
 8001120:	08001187 	.word	0x08001187
 8001124:	08001217 	.word	0x08001217
 8001128:	080010d9 	.word	0x080010d9
 800112c:	080010d9 	.word	0x080010d9
 8001130:	0800127f 	.word	0x0800127f
 8001134:	080010d9 	.word	0x080010d9
 8001138:	08001187 	.word	0x08001187
 800113c:	080010d9 	.word	0x080010d9
 8001140:	080010d9 	.word	0x080010d9
 8001144:	0800121f 	.word	0x0800121f
 8001148:	6833      	ldr	r3, [r6, #0]
 800114a:	1d1a      	adds	r2, r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6032      	str	r2, [r6, #0]
 8001150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001158:	2301      	movs	r3, #1
 800115a:	e09d      	b.n	8001298 <_printf_i+0x1e8>
 800115c:	6833      	ldr	r3, [r6, #0]
 800115e:	6820      	ldr	r0, [r4, #0]
 8001160:	1d19      	adds	r1, r3, #4
 8001162:	6031      	str	r1, [r6, #0]
 8001164:	0606      	lsls	r6, r0, #24
 8001166:	d501      	bpl.n	800116c <_printf_i+0xbc>
 8001168:	681d      	ldr	r5, [r3, #0]
 800116a:	e003      	b.n	8001174 <_printf_i+0xc4>
 800116c:	0645      	lsls	r5, r0, #25
 800116e:	d5fb      	bpl.n	8001168 <_printf_i+0xb8>
 8001170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001174:	2d00      	cmp	r5, #0
 8001176:	da03      	bge.n	8001180 <_printf_i+0xd0>
 8001178:	232d      	movs	r3, #45	@ 0x2d
 800117a:	426d      	negs	r5, r5
 800117c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001180:	4859      	ldr	r0, [pc, #356]	@ (80012e8 <_printf_i+0x238>)
 8001182:	230a      	movs	r3, #10
 8001184:	e011      	b.n	80011aa <_printf_i+0xfa>
 8001186:	6821      	ldr	r1, [r4, #0]
 8001188:	6833      	ldr	r3, [r6, #0]
 800118a:	0608      	lsls	r0, r1, #24
 800118c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001190:	d402      	bmi.n	8001198 <_printf_i+0xe8>
 8001192:	0649      	lsls	r1, r1, #25
 8001194:	bf48      	it	mi
 8001196:	b2ad      	uxthmi	r5, r5
 8001198:	2f6f      	cmp	r7, #111	@ 0x6f
 800119a:	4853      	ldr	r0, [pc, #332]	@ (80012e8 <_printf_i+0x238>)
 800119c:	6033      	str	r3, [r6, #0]
 800119e:	bf14      	ite	ne
 80011a0:	230a      	movne	r3, #10
 80011a2:	2308      	moveq	r3, #8
 80011a4:	2100      	movs	r1, #0
 80011a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80011aa:	6866      	ldr	r6, [r4, #4]
 80011ac:	60a6      	str	r6, [r4, #8]
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	bfa2      	ittt	ge
 80011b2:	6821      	ldrge	r1, [r4, #0]
 80011b4:	f021 0104 	bicge.w	r1, r1, #4
 80011b8:	6021      	strge	r1, [r4, #0]
 80011ba:	b90d      	cbnz	r5, 80011c0 <_printf_i+0x110>
 80011bc:	2e00      	cmp	r6, #0
 80011be:	d04b      	beq.n	8001258 <_printf_i+0x1a8>
 80011c0:	4616      	mov	r6, r2
 80011c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80011c6:	fb03 5711 	mls	r7, r3, r1, r5
 80011ca:	5dc7      	ldrb	r7, [r0, r7]
 80011cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80011d0:	462f      	mov	r7, r5
 80011d2:	42bb      	cmp	r3, r7
 80011d4:	460d      	mov	r5, r1
 80011d6:	d9f4      	bls.n	80011c2 <_printf_i+0x112>
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d10b      	bne.n	80011f4 <_printf_i+0x144>
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	07df      	lsls	r7, r3, #31
 80011e0:	d508      	bpl.n	80011f4 <_printf_i+0x144>
 80011e2:	6923      	ldr	r3, [r4, #16]
 80011e4:	6861      	ldr	r1, [r4, #4]
 80011e6:	4299      	cmp	r1, r3
 80011e8:	bfde      	ittt	le
 80011ea:	2330      	movle	r3, #48	@ 0x30
 80011ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80011f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80011f4:	1b92      	subs	r2, r2, r6
 80011f6:	6122      	str	r2, [r4, #16]
 80011f8:	f8cd a000 	str.w	sl, [sp]
 80011fc:	464b      	mov	r3, r9
 80011fe:	aa03      	add	r2, sp, #12
 8001200:	4621      	mov	r1, r4
 8001202:	4640      	mov	r0, r8
 8001204:	f7ff fee6 	bl	8000fd4 <_printf_common>
 8001208:	3001      	adds	r0, #1
 800120a:	d14a      	bne.n	80012a2 <_printf_i+0x1f2>
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	b004      	add	sp, #16
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	4833      	ldr	r0, [pc, #204]	@ (80012ec <_printf_i+0x23c>)
 8001220:	2778      	movs	r7, #120	@ 0x78
 8001222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	6831      	ldr	r1, [r6, #0]
 800122a:	061f      	lsls	r7, r3, #24
 800122c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001230:	d402      	bmi.n	8001238 <_printf_i+0x188>
 8001232:	065f      	lsls	r7, r3, #25
 8001234:	bf48      	it	mi
 8001236:	b2ad      	uxthmi	r5, r5
 8001238:	6031      	str	r1, [r6, #0]
 800123a:	07d9      	lsls	r1, r3, #31
 800123c:	bf44      	itt	mi
 800123e:	f043 0320 	orrmi.w	r3, r3, #32
 8001242:	6023      	strmi	r3, [r4, #0]
 8001244:	b11d      	cbz	r5, 800124e <_printf_i+0x19e>
 8001246:	2310      	movs	r3, #16
 8001248:	e7ac      	b.n	80011a4 <_printf_i+0xf4>
 800124a:	4827      	ldr	r0, [pc, #156]	@ (80012e8 <_printf_i+0x238>)
 800124c:	e7e9      	b.n	8001222 <_printf_i+0x172>
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	f023 0320 	bic.w	r3, r3, #32
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	e7f6      	b.n	8001246 <_printf_i+0x196>
 8001258:	4616      	mov	r6, r2
 800125a:	e7bd      	b.n	80011d8 <_printf_i+0x128>
 800125c:	6833      	ldr	r3, [r6, #0]
 800125e:	6825      	ldr	r5, [r4, #0]
 8001260:	6961      	ldr	r1, [r4, #20]
 8001262:	1d18      	adds	r0, r3, #4
 8001264:	6030      	str	r0, [r6, #0]
 8001266:	062e      	lsls	r6, r5, #24
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	d501      	bpl.n	8001270 <_printf_i+0x1c0>
 800126c:	6019      	str	r1, [r3, #0]
 800126e:	e002      	b.n	8001276 <_printf_i+0x1c6>
 8001270:	0668      	lsls	r0, r5, #25
 8001272:	d5fb      	bpl.n	800126c <_printf_i+0x1bc>
 8001274:	8019      	strh	r1, [r3, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	6123      	str	r3, [r4, #16]
 800127a:	4616      	mov	r6, r2
 800127c:	e7bc      	b.n	80011f8 <_printf_i+0x148>
 800127e:	6833      	ldr	r3, [r6, #0]
 8001280:	1d1a      	adds	r2, r3, #4
 8001282:	6032      	str	r2, [r6, #0]
 8001284:	681e      	ldr	r6, [r3, #0]
 8001286:	6862      	ldr	r2, [r4, #4]
 8001288:	2100      	movs	r1, #0
 800128a:	4630      	mov	r0, r6
 800128c:	f7fe ffa8 	bl	80001e0 <memchr>
 8001290:	b108      	cbz	r0, 8001296 <_printf_i+0x1e6>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	6060      	str	r0, [r4, #4]
 8001296:	6863      	ldr	r3, [r4, #4]
 8001298:	6123      	str	r3, [r4, #16]
 800129a:	2300      	movs	r3, #0
 800129c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012a0:	e7aa      	b.n	80011f8 <_printf_i+0x148>
 80012a2:	6923      	ldr	r3, [r4, #16]
 80012a4:	4632      	mov	r2, r6
 80012a6:	4649      	mov	r1, r9
 80012a8:	4640      	mov	r0, r8
 80012aa:	47d0      	blx	sl
 80012ac:	3001      	adds	r0, #1
 80012ae:	d0ad      	beq.n	800120c <_printf_i+0x15c>
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	079b      	lsls	r3, r3, #30
 80012b4:	d413      	bmi.n	80012de <_printf_i+0x22e>
 80012b6:	68e0      	ldr	r0, [r4, #12]
 80012b8:	9b03      	ldr	r3, [sp, #12]
 80012ba:	4298      	cmp	r0, r3
 80012bc:	bfb8      	it	lt
 80012be:	4618      	movlt	r0, r3
 80012c0:	e7a6      	b.n	8001210 <_printf_i+0x160>
 80012c2:	2301      	movs	r3, #1
 80012c4:	4632      	mov	r2, r6
 80012c6:	4649      	mov	r1, r9
 80012c8:	4640      	mov	r0, r8
 80012ca:	47d0      	blx	sl
 80012cc:	3001      	adds	r0, #1
 80012ce:	d09d      	beq.n	800120c <_printf_i+0x15c>
 80012d0:	3501      	adds	r5, #1
 80012d2:	68e3      	ldr	r3, [r4, #12]
 80012d4:	9903      	ldr	r1, [sp, #12]
 80012d6:	1a5b      	subs	r3, r3, r1
 80012d8:	42ab      	cmp	r3, r5
 80012da:	dcf2      	bgt.n	80012c2 <_printf_i+0x212>
 80012dc:	e7eb      	b.n	80012b6 <_printf_i+0x206>
 80012de:	2500      	movs	r5, #0
 80012e0:	f104 0619 	add.w	r6, r4, #25
 80012e4:	e7f5      	b.n	80012d2 <_printf_i+0x222>
 80012e6:	bf00      	nop
 80012e8:	080018eb 	.word	0x080018eb
 80012ec:	080018fc 	.word	0x080018fc

080012f0 <__sflush_r>:
 80012f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f8:	0716      	lsls	r6, r2, #28
 80012fa:	4605      	mov	r5, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	d454      	bmi.n	80013aa <__sflush_r+0xba>
 8001300:	684b      	ldr	r3, [r1, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	dc02      	bgt.n	800130c <__sflush_r+0x1c>
 8001306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	dd48      	ble.n	800139e <__sflush_r+0xae>
 800130c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800130e:	2e00      	cmp	r6, #0
 8001310:	d045      	beq.n	800139e <__sflush_r+0xae>
 8001312:	2300      	movs	r3, #0
 8001314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001318:	682f      	ldr	r7, [r5, #0]
 800131a:	6a21      	ldr	r1, [r4, #32]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	d030      	beq.n	8001382 <__sflush_r+0x92>
 8001320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	0759      	lsls	r1, r3, #29
 8001326:	d505      	bpl.n	8001334 <__sflush_r+0x44>
 8001328:	6863      	ldr	r3, [r4, #4]
 800132a:	1ad2      	subs	r2, r2, r3
 800132c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800132e:	b10b      	cbz	r3, 8001334 <__sflush_r+0x44>
 8001330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001332:	1ad2      	subs	r2, r2, r3
 8001334:	2300      	movs	r3, #0
 8001336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001338:	6a21      	ldr	r1, [r4, #32]
 800133a:	4628      	mov	r0, r5
 800133c:	47b0      	blx	r6
 800133e:	1c43      	adds	r3, r0, #1
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	d106      	bne.n	8001352 <__sflush_r+0x62>
 8001344:	6829      	ldr	r1, [r5, #0]
 8001346:	291d      	cmp	r1, #29
 8001348:	d82b      	bhi.n	80013a2 <__sflush_r+0xb2>
 800134a:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <__sflush_r+0x104>)
 800134c:	410a      	asrs	r2, r1
 800134e:	07d6      	lsls	r6, r2, #31
 8001350:	d427      	bmi.n	80013a2 <__sflush_r+0xb2>
 8001352:	2200      	movs	r2, #0
 8001354:	6062      	str	r2, [r4, #4]
 8001356:	04d9      	lsls	r1, r3, #19
 8001358:	6922      	ldr	r2, [r4, #16]
 800135a:	6022      	str	r2, [r4, #0]
 800135c:	d504      	bpl.n	8001368 <__sflush_r+0x78>
 800135e:	1c42      	adds	r2, r0, #1
 8001360:	d101      	bne.n	8001366 <__sflush_r+0x76>
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	b903      	cbnz	r3, 8001368 <__sflush_r+0x78>
 8001366:	6560      	str	r0, [r4, #84]	@ 0x54
 8001368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800136a:	602f      	str	r7, [r5, #0]
 800136c:	b1b9      	cbz	r1, 800139e <__sflush_r+0xae>
 800136e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001372:	4299      	cmp	r1, r3
 8001374:	d002      	beq.n	800137c <__sflush_r+0x8c>
 8001376:	4628      	mov	r0, r5
 8001378:	f7ff fbea 	bl	8000b50 <_free_r>
 800137c:	2300      	movs	r3, #0
 800137e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001380:	e00d      	b.n	800139e <__sflush_r+0xae>
 8001382:	2301      	movs	r3, #1
 8001384:	4628      	mov	r0, r5
 8001386:	47b0      	blx	r6
 8001388:	4602      	mov	r2, r0
 800138a:	1c50      	adds	r0, r2, #1
 800138c:	d1c9      	bne.n	8001322 <__sflush_r+0x32>
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0c6      	beq.n	8001322 <__sflush_r+0x32>
 8001394:	2b1d      	cmp	r3, #29
 8001396:	d001      	beq.n	800139c <__sflush_r+0xac>
 8001398:	2b16      	cmp	r3, #22
 800139a:	d11e      	bne.n	80013da <__sflush_r+0xea>
 800139c:	602f      	str	r7, [r5, #0]
 800139e:	2000      	movs	r0, #0
 80013a0:	e022      	b.n	80013e8 <__sflush_r+0xf8>
 80013a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	e01b      	b.n	80013e2 <__sflush_r+0xf2>
 80013aa:	690f      	ldr	r7, [r1, #16]
 80013ac:	2f00      	cmp	r7, #0
 80013ae:	d0f6      	beq.n	800139e <__sflush_r+0xae>
 80013b0:	0793      	lsls	r3, r2, #30
 80013b2:	680e      	ldr	r6, [r1, #0]
 80013b4:	bf08      	it	eq
 80013b6:	694b      	ldreq	r3, [r1, #20]
 80013b8:	600f      	str	r7, [r1, #0]
 80013ba:	bf18      	it	ne
 80013bc:	2300      	movne	r3, #0
 80013be:	eba6 0807 	sub.w	r8, r6, r7
 80013c2:	608b      	str	r3, [r1, #8]
 80013c4:	f1b8 0f00 	cmp.w	r8, #0
 80013c8:	dde9      	ble.n	800139e <__sflush_r+0xae>
 80013ca:	6a21      	ldr	r1, [r4, #32]
 80013cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80013ce:	4643      	mov	r3, r8
 80013d0:	463a      	mov	r2, r7
 80013d2:	4628      	mov	r0, r5
 80013d4:	47b0      	blx	r6
 80013d6:	2800      	cmp	r0, #0
 80013d8:	dc08      	bgt.n	80013ec <__sflush_r+0xfc>
 80013da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ec:	4407      	add	r7, r0
 80013ee:	eba8 0800 	sub.w	r8, r8, r0
 80013f2:	e7e7      	b.n	80013c4 <__sflush_r+0xd4>
 80013f4:	dfbffffe 	.word	0xdfbffffe

080013f8 <_fflush_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	690b      	ldr	r3, [r1, #16]
 80013fc:	4605      	mov	r5, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	b913      	cbnz	r3, 8001408 <_fflush_r+0x10>
 8001402:	2500      	movs	r5, #0
 8001404:	4628      	mov	r0, r5
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	b118      	cbz	r0, 8001412 <_fflush_r+0x1a>
 800140a:	6a03      	ldr	r3, [r0, #32]
 800140c:	b90b      	cbnz	r3, 8001412 <_fflush_r+0x1a>
 800140e:	f7ff fa71 	bl	80008f4 <__sinit>
 8001412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f3      	beq.n	8001402 <_fflush_r+0xa>
 800141a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800141c:	07d0      	lsls	r0, r2, #31
 800141e:	d404      	bmi.n	800142a <_fflush_r+0x32>
 8001420:	0599      	lsls	r1, r3, #22
 8001422:	d402      	bmi.n	800142a <_fflush_r+0x32>
 8001424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001426:	f7ff fb72 	bl	8000b0e <__retarget_lock_acquire_recursive>
 800142a:	4628      	mov	r0, r5
 800142c:	4621      	mov	r1, r4
 800142e:	f7ff ff5f 	bl	80012f0 <__sflush_r>
 8001432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001434:	07da      	lsls	r2, r3, #31
 8001436:	4605      	mov	r5, r0
 8001438:	d4e4      	bmi.n	8001404 <_fflush_r+0xc>
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	059b      	lsls	r3, r3, #22
 800143e:	d4e1      	bmi.n	8001404 <_fflush_r+0xc>
 8001440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001442:	f7ff fb65 	bl	8000b10 <__retarget_lock_release_recursive>
 8001446:	e7dd      	b.n	8001404 <_fflush_r+0xc>

08001448 <fiprintf>:
 8001448:	b40e      	push	{r1, r2, r3}
 800144a:	b503      	push	{r0, r1, lr}
 800144c:	4601      	mov	r1, r0
 800144e:	ab03      	add	r3, sp, #12
 8001450:	4805      	ldr	r0, [pc, #20]	@ (8001468 <fiprintf+0x20>)
 8001452:	f853 2b04 	ldr.w	r2, [r3], #4
 8001456:	6800      	ldr	r0, [r0, #0]
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f7ff fca3 	bl	8000da4 <_vfiprintf_r>
 800145e:	b002      	add	sp, #8
 8001460:	f85d eb04 	ldr.w	lr, [sp], #4
 8001464:	b003      	add	sp, #12
 8001466:	4770      	bx	lr
 8001468:	20000058 	.word	0x20000058

0800146c <_putc_r>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	460d      	mov	r5, r1
 8001470:	4614      	mov	r4, r2
 8001472:	4606      	mov	r6, r0
 8001474:	b118      	cbz	r0, 800147e <_putc_r+0x12>
 8001476:	6a03      	ldr	r3, [r0, #32]
 8001478:	b90b      	cbnz	r3, 800147e <_putc_r+0x12>
 800147a:	f7ff fa3b 	bl	80008f4 <__sinit>
 800147e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001480:	07d8      	lsls	r0, r3, #31
 8001482:	d405      	bmi.n	8001490 <_putc_r+0x24>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	0599      	lsls	r1, r3, #22
 8001488:	d402      	bmi.n	8001490 <_putc_r+0x24>
 800148a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800148c:	f7ff fb3f 	bl	8000b0e <__retarget_lock_acquire_recursive>
 8001490:	68a3      	ldr	r3, [r4, #8]
 8001492:	3b01      	subs	r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	60a3      	str	r3, [r4, #8]
 8001498:	da05      	bge.n	80014a6 <_putc_r+0x3a>
 800149a:	69a2      	ldr	r2, [r4, #24]
 800149c:	4293      	cmp	r3, r2
 800149e:	db12      	blt.n	80014c6 <_putc_r+0x5a>
 80014a0:	b2eb      	uxtb	r3, r5
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d00f      	beq.n	80014c6 <_putc_r+0x5a>
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	6022      	str	r2, [r4, #0]
 80014ac:	701d      	strb	r5, [r3, #0]
 80014ae:	b2ed      	uxtb	r5, r5
 80014b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80014b2:	07da      	lsls	r2, r3, #31
 80014b4:	d405      	bmi.n	80014c2 <_putc_r+0x56>
 80014b6:	89a3      	ldrh	r3, [r4, #12]
 80014b8:	059b      	lsls	r3, r3, #22
 80014ba:	d402      	bmi.n	80014c2 <_putc_r+0x56>
 80014bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014be:	f7ff fb27 	bl	8000b10 <__retarget_lock_release_recursive>
 80014c2:	4628      	mov	r0, r5
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
 80014c6:	4629      	mov	r1, r5
 80014c8:	4622      	mov	r2, r4
 80014ca:	4630      	mov	r0, r6
 80014cc:	f000 f802 	bl	80014d4 <__swbuf_r>
 80014d0:	4605      	mov	r5, r0
 80014d2:	e7ed      	b.n	80014b0 <_putc_r+0x44>

080014d4 <__swbuf_r>:
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	460e      	mov	r6, r1
 80014d8:	4614      	mov	r4, r2
 80014da:	4605      	mov	r5, r0
 80014dc:	b118      	cbz	r0, 80014e6 <__swbuf_r+0x12>
 80014de:	6a03      	ldr	r3, [r0, #32]
 80014e0:	b90b      	cbnz	r3, 80014e6 <__swbuf_r+0x12>
 80014e2:	f7ff fa07 	bl	80008f4 <__sinit>
 80014e6:	69a3      	ldr	r3, [r4, #24]
 80014e8:	60a3      	str	r3, [r4, #8]
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	071a      	lsls	r2, r3, #28
 80014ee:	d501      	bpl.n	80014f4 <__swbuf_r+0x20>
 80014f0:	6923      	ldr	r3, [r4, #16]
 80014f2:	b943      	cbnz	r3, 8001506 <__swbuf_r+0x32>
 80014f4:	4621      	mov	r1, r4
 80014f6:	4628      	mov	r0, r5
 80014f8:	f000 f82a 	bl	8001550 <__swsetup_r>
 80014fc:	b118      	cbz	r0, 8001506 <__swbuf_r+0x32>
 80014fe:	f04f 37ff 	mov.w	r7, #4294967295
 8001502:	4638      	mov	r0, r7
 8001504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	6922      	ldr	r2, [r4, #16]
 800150a:	1a98      	subs	r0, r3, r2
 800150c:	6963      	ldr	r3, [r4, #20]
 800150e:	b2f6      	uxtb	r6, r6
 8001510:	4283      	cmp	r3, r0
 8001512:	4637      	mov	r7, r6
 8001514:	dc05      	bgt.n	8001522 <__swbuf_r+0x4e>
 8001516:	4621      	mov	r1, r4
 8001518:	4628      	mov	r0, r5
 800151a:	f7ff ff6d 	bl	80013f8 <_fflush_r>
 800151e:	2800      	cmp	r0, #0
 8001520:	d1ed      	bne.n	80014fe <__swbuf_r+0x2a>
 8001522:	68a3      	ldr	r3, [r4, #8]
 8001524:	3b01      	subs	r3, #1
 8001526:	60a3      	str	r3, [r4, #8]
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	6022      	str	r2, [r4, #0]
 800152e:	701e      	strb	r6, [r3, #0]
 8001530:	6962      	ldr	r2, [r4, #20]
 8001532:	1c43      	adds	r3, r0, #1
 8001534:	429a      	cmp	r2, r3
 8001536:	d004      	beq.n	8001542 <__swbuf_r+0x6e>
 8001538:	89a3      	ldrh	r3, [r4, #12]
 800153a:	07db      	lsls	r3, r3, #31
 800153c:	d5e1      	bpl.n	8001502 <__swbuf_r+0x2e>
 800153e:	2e0a      	cmp	r6, #10
 8001540:	d1df      	bne.n	8001502 <__swbuf_r+0x2e>
 8001542:	4621      	mov	r1, r4
 8001544:	4628      	mov	r0, r5
 8001546:	f7ff ff57 	bl	80013f8 <_fflush_r>
 800154a:	2800      	cmp	r0, #0
 800154c:	d0d9      	beq.n	8001502 <__swbuf_r+0x2e>
 800154e:	e7d6      	b.n	80014fe <__swbuf_r+0x2a>

08001550 <__swsetup_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <__swsetup_r+0xa8>)
 8001554:	4605      	mov	r5, r0
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	460c      	mov	r4, r1
 800155a:	b118      	cbz	r0, 8001564 <__swsetup_r+0x14>
 800155c:	6a03      	ldr	r3, [r0, #32]
 800155e:	b90b      	cbnz	r3, 8001564 <__swsetup_r+0x14>
 8001560:	f7ff f9c8 	bl	80008f4 <__sinit>
 8001564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001568:	0719      	lsls	r1, r3, #28
 800156a:	d422      	bmi.n	80015b2 <__swsetup_r+0x62>
 800156c:	06da      	lsls	r2, r3, #27
 800156e:	d407      	bmi.n	8001580 <__swsetup_r+0x30>
 8001570:	2209      	movs	r2, #9
 8001572:	602a      	str	r2, [r5, #0]
 8001574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001578:	81a3      	strh	r3, [r4, #12]
 800157a:	f04f 30ff 	mov.w	r0, #4294967295
 800157e:	e033      	b.n	80015e8 <__swsetup_r+0x98>
 8001580:	0758      	lsls	r0, r3, #29
 8001582:	d512      	bpl.n	80015aa <__swsetup_r+0x5a>
 8001584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001586:	b141      	cbz	r1, 800159a <__swsetup_r+0x4a>
 8001588:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800158c:	4299      	cmp	r1, r3
 800158e:	d002      	beq.n	8001596 <__swsetup_r+0x46>
 8001590:	4628      	mov	r0, r5
 8001592:	f7ff fadd 	bl	8000b50 <_free_r>
 8001596:	2300      	movs	r3, #0
 8001598:	6363      	str	r3, [r4, #52]	@ 0x34
 800159a:	89a3      	ldrh	r3, [r4, #12]
 800159c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80015a0:	81a3      	strh	r3, [r4, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	6063      	str	r3, [r4, #4]
 80015a6:	6923      	ldr	r3, [r4, #16]
 80015a8:	6023      	str	r3, [r4, #0]
 80015aa:	89a3      	ldrh	r3, [r4, #12]
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	81a3      	strh	r3, [r4, #12]
 80015b2:	6923      	ldr	r3, [r4, #16]
 80015b4:	b94b      	cbnz	r3, 80015ca <__swsetup_r+0x7a>
 80015b6:	89a3      	ldrh	r3, [r4, #12]
 80015b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80015bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c0:	d003      	beq.n	80015ca <__swsetup_r+0x7a>
 80015c2:	4621      	mov	r1, r4
 80015c4:	4628      	mov	r0, r5
 80015c6:	f000 f856 	bl	8001676 <__smakebuf_r>
 80015ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ce:	f013 0201 	ands.w	r2, r3, #1
 80015d2:	d00a      	beq.n	80015ea <__swsetup_r+0x9a>
 80015d4:	2200      	movs	r2, #0
 80015d6:	60a2      	str	r2, [r4, #8]
 80015d8:	6962      	ldr	r2, [r4, #20]
 80015da:	4252      	negs	r2, r2
 80015dc:	61a2      	str	r2, [r4, #24]
 80015de:	6922      	ldr	r2, [r4, #16]
 80015e0:	b942      	cbnz	r2, 80015f4 <__swsetup_r+0xa4>
 80015e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80015e6:	d1c5      	bne.n	8001574 <__swsetup_r+0x24>
 80015e8:	bd38      	pop	{r3, r4, r5, pc}
 80015ea:	0799      	lsls	r1, r3, #30
 80015ec:	bf58      	it	pl
 80015ee:	6962      	ldrpl	r2, [r4, #20]
 80015f0:	60a2      	str	r2, [r4, #8]
 80015f2:	e7f4      	b.n	80015de <__swsetup_r+0x8e>
 80015f4:	2000      	movs	r0, #0
 80015f6:	e7f7      	b.n	80015e8 <__swsetup_r+0x98>
 80015f8:	20000058 	.word	0x20000058

080015fc <_sbrk_r>:
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	4d06      	ldr	r5, [pc, #24]	@ (8001618 <_sbrk_r+0x1c>)
 8001600:	2300      	movs	r3, #0
 8001602:	4604      	mov	r4, r0
 8001604:	4608      	mov	r0, r1
 8001606:	602b      	str	r3, [r5, #0]
 8001608:	f7ff f824 	bl	8000654 <_sbrk>
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	d102      	bne.n	8001616 <_sbrk_r+0x1a>
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	b103      	cbz	r3, 8001616 <_sbrk_r+0x1a>
 8001614:	6023      	str	r3, [r4, #0]
 8001616:	bd38      	pop	{r3, r4, r5, pc}
 8001618:	20000208 	.word	0x20000208

0800161c <abort>:
 800161c:	b508      	push	{r3, lr}
 800161e:	2006      	movs	r0, #6
 8001620:	f000 f88e 	bl	8001740 <raise>
 8001624:	2001      	movs	r0, #1
 8001626:	f7fe ff9c 	bl	8000562 <_exit>

0800162a <__swhatbuf_r>:
 800162a:	b570      	push	{r4, r5, r6, lr}
 800162c:	460c      	mov	r4, r1
 800162e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001632:	2900      	cmp	r1, #0
 8001634:	b096      	sub	sp, #88	@ 0x58
 8001636:	4615      	mov	r5, r2
 8001638:	461e      	mov	r6, r3
 800163a:	da0d      	bge.n	8001658 <__swhatbuf_r+0x2e>
 800163c:	89a3      	ldrh	r3, [r4, #12]
 800163e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001642:	f04f 0100 	mov.w	r1, #0
 8001646:	bf14      	ite	ne
 8001648:	2340      	movne	r3, #64	@ 0x40
 800164a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800164e:	2000      	movs	r0, #0
 8001650:	6031      	str	r1, [r6, #0]
 8001652:	602b      	str	r3, [r5, #0]
 8001654:	b016      	add	sp, #88	@ 0x58
 8001656:	bd70      	pop	{r4, r5, r6, pc}
 8001658:	466a      	mov	r2, sp
 800165a:	f000 f879 	bl	8001750 <_fstat_r>
 800165e:	2800      	cmp	r0, #0
 8001660:	dbec      	blt.n	800163c <__swhatbuf_r+0x12>
 8001662:	9901      	ldr	r1, [sp, #4]
 8001664:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001668:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800166c:	4259      	negs	r1, r3
 800166e:	4159      	adcs	r1, r3
 8001670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001674:	e7eb      	b.n	800164e <__swhatbuf_r+0x24>

08001676 <__smakebuf_r>:
 8001676:	898b      	ldrh	r3, [r1, #12]
 8001678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800167a:	079d      	lsls	r5, r3, #30
 800167c:	4606      	mov	r6, r0
 800167e:	460c      	mov	r4, r1
 8001680:	d507      	bpl.n	8001692 <__smakebuf_r+0x1c>
 8001682:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001686:	6023      	str	r3, [r4, #0]
 8001688:	6123      	str	r3, [r4, #16]
 800168a:	2301      	movs	r3, #1
 800168c:	6163      	str	r3, [r4, #20]
 800168e:	b003      	add	sp, #12
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001692:	ab01      	add	r3, sp, #4
 8001694:	466a      	mov	r2, sp
 8001696:	f7ff ffc8 	bl	800162a <__swhatbuf_r>
 800169a:	9f00      	ldr	r7, [sp, #0]
 800169c:	4605      	mov	r5, r0
 800169e:	4639      	mov	r1, r7
 80016a0:	4630      	mov	r0, r6
 80016a2:	f7ff fac9 	bl	8000c38 <_malloc_r>
 80016a6:	b948      	cbnz	r0, 80016bc <__smakebuf_r+0x46>
 80016a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ac:	059a      	lsls	r2, r3, #22
 80016ae:	d4ee      	bmi.n	800168e <__smakebuf_r+0x18>
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	81a3      	strh	r3, [r4, #12]
 80016ba:	e7e2      	b.n	8001682 <__smakebuf_r+0xc>
 80016bc:	89a3      	ldrh	r3, [r4, #12]
 80016be:	6020      	str	r0, [r4, #0]
 80016c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c4:	81a3      	strh	r3, [r4, #12]
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016cc:	b15b      	cbz	r3, 80016e6 <__smakebuf_r+0x70>
 80016ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016d2:	4630      	mov	r0, r6
 80016d4:	f000 f84e 	bl	8001774 <_isatty_r>
 80016d8:	b128      	cbz	r0, 80016e6 <__smakebuf_r+0x70>
 80016da:	89a3      	ldrh	r3, [r4, #12]
 80016dc:	f023 0303 	bic.w	r3, r3, #3
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	81a3      	strh	r3, [r4, #12]
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	431d      	orrs	r5, r3
 80016ea:	81a5      	strh	r5, [r4, #12]
 80016ec:	e7cf      	b.n	800168e <__smakebuf_r+0x18>

080016ee <_raise_r>:
 80016ee:	291f      	cmp	r1, #31
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4605      	mov	r5, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	d904      	bls.n	8001702 <_raise_r+0x14>
 80016f8:	2316      	movs	r3, #22
 80016fa:	6003      	str	r3, [r0, #0]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	bd38      	pop	{r3, r4, r5, pc}
 8001702:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001704:	b112      	cbz	r2, 800170c <_raise_r+0x1e>
 8001706:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800170a:	b94b      	cbnz	r3, 8001720 <_raise_r+0x32>
 800170c:	4628      	mov	r0, r5
 800170e:	f000 f853 	bl	80017b8 <_getpid_r>
 8001712:	4622      	mov	r2, r4
 8001714:	4601      	mov	r1, r0
 8001716:	4628      	mov	r0, r5
 8001718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800171c:	f000 b83a 	b.w	8001794 <_kill_r>
 8001720:	2b01      	cmp	r3, #1
 8001722:	d00a      	beq.n	800173a <_raise_r+0x4c>
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	d103      	bne.n	8001730 <_raise_r+0x42>
 8001728:	2316      	movs	r3, #22
 800172a:	6003      	str	r3, [r0, #0]
 800172c:	2001      	movs	r0, #1
 800172e:	e7e7      	b.n	8001700 <_raise_r+0x12>
 8001730:	2100      	movs	r1, #0
 8001732:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001736:	4620      	mov	r0, r4
 8001738:	4798      	blx	r3
 800173a:	2000      	movs	r0, #0
 800173c:	e7e0      	b.n	8001700 <_raise_r+0x12>
	...

08001740 <raise>:
 8001740:	4b02      	ldr	r3, [pc, #8]	@ (800174c <raise+0xc>)
 8001742:	4601      	mov	r1, r0
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	f7ff bfd2 	b.w	80016ee <_raise_r>
 800174a:	bf00      	nop
 800174c:	20000058 	.word	0x20000058

08001750 <_fstat_r>:
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	4d07      	ldr	r5, [pc, #28]	@ (8001770 <_fstat_r+0x20>)
 8001754:	2300      	movs	r3, #0
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	602b      	str	r3, [r5, #0]
 800175e:	f7fe ff50 	bl	8000602 <_fstat>
 8001762:	1c43      	adds	r3, r0, #1
 8001764:	d102      	bne.n	800176c <_fstat_r+0x1c>
 8001766:	682b      	ldr	r3, [r5, #0]
 8001768:	b103      	cbz	r3, 800176c <_fstat_r+0x1c>
 800176a:	6023      	str	r3, [r4, #0]
 800176c:	bd38      	pop	{r3, r4, r5, pc}
 800176e:	bf00      	nop
 8001770:	20000208 	.word	0x20000208

08001774 <_isatty_r>:
 8001774:	b538      	push	{r3, r4, r5, lr}
 8001776:	4d06      	ldr	r5, [pc, #24]	@ (8001790 <_isatty_r+0x1c>)
 8001778:	2300      	movs	r3, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	f7fe ff4f 	bl	8000622 <_isatty>
 8001784:	1c43      	adds	r3, r0, #1
 8001786:	d102      	bne.n	800178e <_isatty_r+0x1a>
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	b103      	cbz	r3, 800178e <_isatty_r+0x1a>
 800178c:	6023      	str	r3, [r4, #0]
 800178e:	bd38      	pop	{r3, r4, r5, pc}
 8001790:	20000208 	.word	0x20000208

08001794 <_kill_r>:
 8001794:	b538      	push	{r3, r4, r5, lr}
 8001796:	4d07      	ldr	r5, [pc, #28]	@ (80017b4 <_kill_r+0x20>)
 8001798:	2300      	movs	r3, #0
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	602b      	str	r3, [r5, #0]
 80017a2:	f7fe fece 	bl	8000542 <_kill>
 80017a6:	1c43      	adds	r3, r0, #1
 80017a8:	d102      	bne.n	80017b0 <_kill_r+0x1c>
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	b103      	cbz	r3, 80017b0 <_kill_r+0x1c>
 80017ae:	6023      	str	r3, [r4, #0]
 80017b0:	bd38      	pop	{r3, r4, r5, pc}
 80017b2:	bf00      	nop
 80017b4:	20000208 	.word	0x20000208

080017b8 <_getpid_r>:
 80017b8:	f7fe bebb 	b.w	8000532 <_getpid>

080017bc <_init>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr

080017c8 <_fini>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	bf00      	nop
 80017cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ce:	bc08      	pop	{r3}
 80017d0:	469e      	mov	lr, r3
 80017d2:	4770      	bx	lr
